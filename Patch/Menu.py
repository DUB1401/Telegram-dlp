from Patch.Hello import PatchReplyKeyboards
from Patch.YouTube import Trends

from dublib.Methods.Filesystem import ReadJSON
from dublib.TelebotUtils import UsersManager
from dublib.Engine.GetText import _
from dublib.Polyglot import HTML

from datetime import datetime
from telebot import TeleBot, types
from time import sleep

BOT_NAME = ""
SUPPORT = ""

class PatchInlineKeyboards:
	"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

	def __init__(self):
		"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__Settings = ReadJSON("Patch/Settings.json")

	def ok(self) -> types.InlineKeyboardMarkup:
		Menu = types.InlineKeyboardMarkup()
		Button = types.InlineKeyboardButton(_("–í—Å—ë —è—Å–Ω–æ!"), callback_data = "delete_message")
		Menu.add(Button, row_width = 1)

		return Menu
	
	def share(self) -> types.InlineKeyboardMarkup:
		Menu = types.InlineKeyboardMarkup()

		Share = types.InlineKeyboardButton(
			"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
			switch_inline_query = "\n\n" +  HTML(self.__Settings["bot_title"]).plain_text + "\n" + _("–õ—É—á—à–∏–π –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ üé¨ –∏ –∞—É–¥–∏–æ üéµ —Å–æ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ–¥–∏–∞ –ø–ª–æ—â–∞–¥–æ–∫!")
			)
		
		Menu.add(Share)

		return Menu
	
	def support(self) -> types.InlineKeyboardMarkup:
		Menu = types.InlineKeyboardMarkup()
		Support = types.InlineKeyboardButton(_("–°–ø–∞—Å–∏–±–æ, –≤—Å–µ —Ö–æ—Ä–æ—à–æ!"), callback_data = "delete_message")
		
		Menu.add(Support)

		return Menu
	
	def trends(self) -> types.InlineKeyboardMarkup:
		Menu = types.InlineKeyboardMarkup()
		News = types.InlineKeyboardButton(_("TOP 20 Videos YouTube") + " üìπ", callback_data = "trends_news")
		Music = types.InlineKeyboardButton(_("TOP 20 Music YouTube") + " üéµ", callback_data = "trends_music")
		Menu.add(News, Music, row_width = 1)

		return Menu

def ButtonsDecorators(bot: TeleBot, users: UsersManager):
	Settings = ReadJSON("Patch/Settings.json")

	@bot.message_handler(content_types = ["text"], regexp = _("üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"))
	def Button(Message: types.Message):
		User = users.auth(Message.from_user)
		bot.send_photo(
			Message.chat.id,
			photo = Settings["share_image"],
			caption = "@%s\n@%s\n@%s\n\n" % (BOT_NAME, BOT_NAME, BOT_NAME) + Settings["bot_title"] + "\n" + _("–õ—É—á—à–∏–π –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ üé¨ –∏ –∞—É–¥–∏–æ üéµ —Å–æ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ–¥–∏–∞ –ø–ª–æ—â–∞–¥–æ–∫!") + "\n\n<b><i>" + _("–ü–æ–ª—å–∑—É–π—Å—è –∏ –¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!") + "</i></b>",
			reply_markup = PatchInlineKeyboards().share(),
			parse_mode = "HTML"
		)
		
	@bot.message_handler(content_types = ["text"], regexp = _("‚ôªÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"))
	def Text(Message: types.Message):
		User = users.auth(Message.from_user)
		bot.send_message(User.id, _("–ù—É –∏ –∫–∞–∫–æ–µ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?) –£–¥–∏–≤–∏! üòÑ"))
		User.set_expected_type("user_name")

	@bot.message_handler(content_types = ["text"], regexp = _("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
	def Text(Message: types.Message):
		User = users.auth(Message.from_user)
		bot.send_message(
			chat_id = Message.chat.id,
			text = _("–î—Ä—É–∑—å—è, –µ—Å–ª–∏ —É –≤–∞—Å –≤–¥—Ä—É–≥ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, —Ç–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–∏—à–∏—Ç–µ –≤–æ—Ç —Å—é–¥–∞ üëáüëáüëá\n\n@%s\n\n–°–¥–µ–ª–∞–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞—Å –µ—â–µ –ª—É—á—à–µ! üòâ") % SUPPORT,
			reply_markup = PatchInlineKeyboards().support()
		)

	@bot.message_handler(content_types = ["text"], regexp = _("üî• YouTube Trends"))
	def Button(Message: types.Message):
		User = users.auth(Message.from_user)

		bot.send_message(
			Message.chat.id,
			text = "üî• YouTube –¢—Ä–µ–Ω–¥—ã –Ω–∞ " + datetime.now().date().strftime("%d.%m.%Y"),
			reply_markup = PatchInlineKeyboards().trends()
		)

def CommandsDecorators(bot: TeleBot, users: UsersManager):

	@bot.message_handler(commands = ["info"])
	def CommandInfo(Message: types.Message):
		User = users.auth(Message.from_user)
		bot.send_message(
			Message.chat.id,
			text = _("@%s –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ üì∫ –∏ –∞—É–¥–∏–æ üìª —Å —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ–¥–∏–∞ –ø–ª–æ—â–∞–¥–æ–∫, —Ç–∞–∫–∏—Ö –∫–∞–∫: VK, YouTube, TikTok, Instagram –∏ –¥—Ä.\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Ä–æ–ª–∏–∫! ü¶æ\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ, –∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –∏–∑ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞!\n\n<b><i>–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å, –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</i></b>") % BOT_NAME,
			parse_mode = "HTML",
			reply_markup = PatchInlineKeyboards().ok()
		)

def InlineDecorators(bot: TeleBot, users: UsersManager, trender: Trends):

	@bot.callback_query_handler(func = lambda Callback: Callback.data == "delete_message")
	def InlineButton(Call: types.CallbackQuery):
		User = users.auth(Call.from_user)
		bot.delete_message(User.id, Call.message.id)

	@bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("device_"))
	def InlineButton(Call: types.CallbackQuery):
		User = users.auth(Call.from_user)
		Device = Call.data.split("_")[-1]
		User.set_property("option_recoding", False if Device == "android" else True)

		try:
			MessageID = User.get_property("remove_message")
			bot.delete_messages(User.id, [MessageID, Call.message.id])

		except: bot.delete_message(User.id, Call.message.id)

		bot.send_message(User.id, _("–°–ø–∞—Å–∏–±–æ! –≠—Ç–æ –¥–ª—è –ª—É—á—à–µ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ–¥ —Ç–µ–±—è!"))
		sleep(0.5)
		bot.send_message(User.id, _("–ö–∏–¥–∞–π –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è —Ç–µ–±–µ —Å–∫–∞—á–∞—é –ª—é–±–æ–π –≤–∏–¥–æ—Å! üëå"), reply_markup = PatchReplyKeyboards().main())

	@bot.callback_query_handler(func = lambda Callback: Callback.data == "trends_news")
	def InlineButton(Call: types.CallbackQuery):
		User = users.auth(Call.from_user)
		News = trender.get_news()
		Text = "<b>" + _("TOP 20 Videos YouTube") + "</b> üìπ\n" + _("‚óè –ù–∞–∂–º–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é\n‚óè –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É\n‚óè –û—Ç–ø—Ä–∞–≤—å –µ—ë –±–æ—Ç—É üòâ") + "\n\n"
		for Index in range(20): Text += str(Index + 1) + ". <a href=\"" + News[Index].link + "\">" + News[Index].title + "</a>\n"
		
		bot.send_message(
			Call.message.chat.id,
			text = Text,
			parse_mode = "HTML",
			disable_web_page_preview = True
		)
		bot.answer_callback_query(Call.id)

	@bot.callback_query_handler(func = lambda Callback: Callback.data == "trends_music")
	def InlineButton(Call: types.CallbackQuery):
		User = users.auth(Call.from_user)
		Music = trender.get_music()
		Text = "<b>" + _("TOP 20 Music YouTube") + "</b> üéµ\n" + _("‚óè –ù–∞–∂–º–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é\n‚óè –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É\n‚óè –û—Ç–ø—Ä–∞–≤—å –µ—ë –±–æ—Ç—É üòâ") + "\n\n"
		for Index in range(20): Text += str(Index + 1) + ". <a href=\"" + Music[Index].link + "\">" + Music[Index].title + "</a>\n"

		bot.send_message(
			Call.message.chat.id,
			text = Text,
			parse_mode = "HTML",
			disable_web_page_preview = True
		)
		bot.answer_callback_query(Call.id)