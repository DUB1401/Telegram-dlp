from Source.UI.InlineKeyboards import InlineKeyboards
from Source.Core.TelethonUser import TelethonUser
from Source.Core.Storage import Storage
from Source.UI.AdminPanel import Panel
from Source.Core.YtDlp import YtDlp

from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.CLI.Terminalyzer import Command, Terminalyzer
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.TelebotUtils import UsersManager
from dublib.Methods.JSON import ReadJSON
from telebot import types, TeleBot
from urllib.parse import urlparse
from time import sleep

#==========================================================================================#
# >>>>> –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê <<<<< #
#==========================================================================================#

CheckPythonMinimalVersion(3, 12)
MakeRootDirectories(["Data/Users", "Temp"])
Clear()

#==========================================================================================#
# >>>>> –ß–¢–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö <<<<< #
#==========================================================================================#

Settings = ReadJSON("Settings.json")
if type(Settings["token"]) != str or Settings["token"].strip() == "": raise Exception("Invalid Telegram bot token.")

#==========================================================================================#
# >>>>> –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ö–û–ú–ê–ù–î <<<<< #
#==========================================================================================#

CommandsList = list()

Com = Command("upload", "–í—ã–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä Telegram.")
Com.add_key("file", important = True, description = "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.")
Com.add_key("site", important = True, description = "–î–æ–º–µ–Ω —Å–∞–π—Ç–∞.")
Com.add_key("user", important = True, description = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
Com.add_key("quality", important = True, description = "–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ.")
Com.add_flag("c", "–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Å–∂–∞—Ç–∏—è —Ñ–∞–π–ª–∞ Telegram.")
Com.add_flag("w", "–ü–æ–º–µ—á–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –∏–º–µ—é—â–∏–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫.")
CommandsList.append(Com)

Com = Command("login", "–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
Com.add_argument(important = True, description = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
Com.add_argument(important = True, description = "API ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
Com.add_argument(important = True, description = "API Hash –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
CommandsList.append(Com)

Analyzer = Terminalyzer()
Analyzer.enable_help(True)
Analyzer.help_translation.help_command_description = "–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
Analyzer.help_translation.important_note = ""
ParsedCommand = Analyzer.check_commands(CommandsList)

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê CLI <<<<< #
#==========================================================================================#

if ParsedCommand and ParsedCommand.name == "help":
	exit(0)

if ParsedCommand and ParsedCommand.name == "upload":
	Filename = ParsedCommand.get_key_value("file")
	UserID = ParsedCommand.get_key_value("user")
	Site = ParsedCommand.get_key_value("site")
	Quality = ParsedCommand.get_key_value("quality")
	Compression = ParsedCommand.check_flag("c")
	Watermarked = ParsedCommand.check_flag("w")
	User = TelethonUser(Settings["bot_name"])
	User.initialize()
	Result = User.upload_file(UserID, Site, Filename, Quality, Compression, Watermarked)
	if Result: exit(0)
	else: exit(1)
	
elif ParsedCommand and ParsedCommand.name == "login":
	User = TelethonUser(Settings["bot_name"])
	User.login(ParsedCommand.arguments[0], ParsedCommand.arguments[1], ParsedCommand.arguments[2])
	
else:
	Bot = TeleBot(Settings["token"])
	Users = UsersManager("Data/Users")
	Downloader = YtDlp("yt-dlp/yt-dlp", Settings["proxy"])
	StorageBox = Storage("Storage", Settings["venv"])
	AdminPanel = Panel()

	#==========================================================================================#
	# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ú–ê–ù–î <<<<< #
	#==========================================================================================#

	AdminPanel.decorators.commands(Bot, Users, Settings["password"])

	@Bot.message_handler(commands = ["about"])
	def CommandAbout(Message: types.Message):
		User = Users.auth(Message.from_user)
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "*Telegram\\-dlp* —è–≤–ª—è–µ—Ç—Å—è Open Source –ø—Ä–æ–µ–∫—Ç–æ–º –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π Apache 2\\.0 –∑–∞ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ–º [@DUB1401](https://github.com/DUB1401)\\ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É [yt\\-dlp](https://github.com/yt-dlp/yt-dlp)\\. –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ [—ç—Ç–æ–º](https://github.com/DUB1401/Telegram-dlp) —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏\\.",
			parse_mode = "MarkdownV2",
			disable_web_page_preview = True
		)
	
	@Bot.message_handler(commands = ["disable_compression"])
	def CommandEnableCompression(Message: types.Message):
		User = Users.auth(Message.from_user)
		User.set_property("compression", False)
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "–°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–æ."
		)

	@Bot.message_handler(commands = ["enable_compression"])
	def CommandEnableCompression(Message: types.Message):
		User = Users.auth(Message.from_user)
		User.set_property("compression", True)
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "–°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram –≤–∫–ª—é—á–µ–Ω–æ."
		)

	@Bot.message_handler(commands = ["start"])
	def CommandStart(Message: types.Message):
		User = Users.auth(Message.from_user)
		User.set_property("compression", True, force = False)
		User.set_property("is_downloading", False)		
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "üëã –ü—Ä–∏–≤–µ—Ç!\n\n–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –Ω–∏—Ö –∞—É–¥–∏–æ. –£ –º–µ–Ω—è –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
		)
		
	#==========================================================================================#
	# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê REPLY-–ö–ù–û–ü–û–ö <<<<< #
	#==========================================================================================#

	AdminPanel.decorators.reply_keyboards(Bot, Users)

	#==========================================================================================#
	# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –¢–ï–ö–°–¢–ê <<<<< #
	#==========================================================================================#

	@Bot.message_handler(content_types = ["text"])
	def Text(Message: types.Message):
		User = Users.auth(Message.from_user)
		if AdminPanel.procedures.text(Bot, User, Message): return

		if User.get_property("is_downloading"):
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–í—ã —É–∂–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫."
			)

		elif urlparse(Message.text).scheme:
			SendedMessage = Bot.send_message(
				chat_id = Message.chat.id,
				text = "–ò–¥—ë—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."
			)
			Site = StorageBox.parse_site_name(Message.text)
			Link = StorageBox.check_link(Message.text)
			VideoID = None
			Info = None

			if Site:
				VideoID = StorageBox.parse_video_id(Site, Link)
				Info = StorageBox.get_info(Site, VideoID)
				if not Info: Info = Downloader.get_info(Link)

			if Info:
				StorageBox.save_info(Site, VideoID, Info)
				User.set_temp_property("link", Link)
				User.set_temp_property("site", Site)
				User.set_temp_property("video_id", Info["id"])
				Bot.delete_message(message_id = SendedMessage.id, chat_id = Message.chat.id)
				InlineKeyboards().send_fromat_selector(Bot, Message.chat.id, Info)

			else:
				Bot.edit_message_text(
					message_id = SendedMessage.id,
					chat_id = Message.chat.id,
					text = "–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ."
				)

		else:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
			)

	#==========================================================================================#
	# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê INLINE-–ö–ù–û–ü–û–ö <<<<< #
	#==========================================================================================#

	AdminPanel.decorators.inline_keyboards(Bot, Users)

	@Bot.callback_query_handler(func = lambda Callback: Callback.data == "download_audio")
	def InlineButton(Call: types.CallbackQuery):
		User = Users.auth(Call.from_user)
		Bot.answer_callback_query(Call.id)
		Bot.delete_message(Call.message.chat.id, Call.message.id)
		User.set_property("is_downloading", True)
		Link = User.get_property("link")
		VideoID = User.get_property("video_id")
		Quality = "audio"
		Site = User.get_property("site")
		Compression = User.get_property("compression")
		FileMessageID = StorageBox.get_file_message_id(Site, VideoID, Quality, Compression)

		if FileMessageID[0]:
			Bot.copy_message(Call.message.chat.id, FileMessageID[0], FileMessageID[1], caption = "@" + Settings["bot_name"])

		else:
			SendedMessage = Bot.send_message(
				chat_id = Call.message.chat.id,
				text = "‚è≥ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ\\.\\.\\.",
				parse_mode = "MarkdownV2" 
			)
			Result = Downloader.download_audio(Link, f"Temp/{User.id}/", f"{VideoID}.m4a")

			if Result:
				Bot.edit_message_text(
					chat_id = Call.message.chat.id,
					message_id = SendedMessage.id,
					text = "‚úÖ –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ.\n‚è≥ –í—ã–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ –≤ Telegram\\.\\.\\.",
					parse_mode = "MarkdownV2" 
				)
				Result = StorageBox.upload_file(User.id, Site, f"{VideoID}.m4a", Quality, Compression)

				if Result:
					Bot.edit_message_text(
						chat_id = Call.message.chat.id,
						message_id = SendedMessage.id,
						text = "‚úÖ –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ\\.\n‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é\\.\\.\\.",
						parse_mode = "MarkdownV2" 
					)
					Result = StorageBox.wait_file_uploading(Site, VideoID, Quality, Compression)

					if Result.code == 0:
						Bot.copy_message(Call.message.chat.id, Result["chat_id"], Result["message_id"], caption = "@" + Settings["bot_name"])
						Bot.edit_message_text(
							chat_id = Call.message.chat.id,
							message_id = SendedMessage.id,
							text = "‚úÖ –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ\\.\n‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\\.",
							parse_mode = "MarkdownV2" 
						)

					else:
						Bot.edit_message_text(
							chat_id = Call.message.chat.id,
							message_id = SendedMessage.id,
							text = "‚úÖ –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ\\.\n‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ\\.",
						parse_mode = "MarkdownV2" 
						)

				else:
					Bot.edit_message_text(
						chat_id = Call.message.chat.id,
						message_id = SendedMessage.id,
						text = "‚úÖ –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ\\.\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –≤ Telegram\\.",
						parse_mode = "MarkdownV2" 
					)

			else:
				Bot.edit_message_text(
					chat_id = Call.message.chat.id,
					message_id = SendedMessage.id,
					text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ\\.",
					parse_mode = "MarkdownV2" 
				)

		User.set_property("is_downloading", False)
		User.clear_temp_properties()

	@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("download_video"))
	def InlineButton(Call: types.CallbackQuery):
		User = Users.auth(Call.from_user)
		Bot.answer_callback_query(Call.id)
		Bot.delete_message(Call.message.chat.id, Call.message.id)
		User.set_property("is_downloading", True)
		Query = Call.data.replace("download_video_", "").replace("%", " ")
		Link = User.get_property("link")
		VideoID = User.get_property("video_id")
		Quality = Query.split("+")[0]
		FormatID = Query.split("+")[1]
		Site = User.get_property("site")
		Compression = User.get_property("compression")
		FileMessageID = StorageBox.get_file_message_id(Site, VideoID, Quality, Compression)
		QualityImprovementGo = "" 
		QualityImprovementReady = ""

		if Settings["quality_improvement"]:
			QualityImprovementGo = "‚è≥ –£–ª—É—á—à–∞—é –∫–∞—á–µ—Å—Ç–≤–æ\\.\\.\\." 
			QualityImprovementReady = "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–æ\\.\n"

		if FileMessageID[0]:
			Bot.copy_message(Call.message.chat.id, FileMessageID[0], FileMessageID[1], caption = "")

		else:
			SendedMessage = Bot.send_message(
				chat_id = Call.message.chat.id,
				text = "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ\\.\\.\\.",
				parse_mode = "MarkdownV2"
			)
			Result = Downloader.download_video(Link, f"Temp/{User.id}/", f"{VideoID}.mp4", FormatID)

			if Result:

				if Settings["quality_improvement"]:
					Bot.edit_message_text(
						chat_id = Call.message.chat.id,
						message_id = SendedMessage.id,
						text = "‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n" + QualityImprovementGo,
						parse_mode = "MarkdownV2"
					)
					sleep(4)

				Bot.edit_message_text(
					chat_id = Call.message.chat.id,
					message_id = SendedMessage.id,
					text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚è≥ –í—ã–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –≤ Telegram\\.\\.\\.",
					parse_mode = "MarkdownV2"
				)
				Result = StorageBox.upload_file(User.id, Site, f"{VideoID}.mp4", Quality, Compression)

				if Result:
					Bot.edit_message_text(
						chat_id = Call.message.chat.id,
						message_id = SendedMessage.id,
						text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é\\.\\.\\.",
						parse_mode = "MarkdownV2"
					)
					Result = StorageBox.wait_file_uploading(Site, VideoID, Quality, Compression)

					if Result.code == 0:
						Bot.copy_message(Call.message.chat.id, Result["chat_id"], Result["message_id"], caption = "@" + Settings["bot_name"])
						Bot.edit_message_text(
							chat_id = Call.message.chat.id,
							message_id = SendedMessage.id,
							text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\\.",
							parse_mode = "MarkdownV2"
						)

					else:
						Bot.edit_message_text(
							chat_id = Call.message.chat.id,
							message_id = SendedMessage.id,
							text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ\\.",
							parse_mode = "MarkdownV2"
						)

				else:
					Bot.edit_message_text(
						chat_id = Call.message.chat.id,
						message_id = SendedMessage.id,
						text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –≤ Telegram\\.",
						parse_mode = "MarkdownV2"
					)

			else:
				Bot.edit_message_text(
					chat_id = Call.message.chat.id,
					message_id = SendedMessage.id,
					text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ\\.",
					parse_mode = "MarkdownV2"
				)

		User.set_property("is_downloading", False)
		User.clear_temp_properties()

	@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("download_watermarked"))
	def InlineButton(Call: types.CallbackQuery):
		User = Users.auth(Call.from_user)
		Bot.answer_callback_query(Call.id)
		Bot.delete_message(Call.message.chat.id, Call.message.id)
		User.set_property("is_downloading", True)
		Query = Call.data.replace("download_watermarked_", "").replace("%", " ")
		Link = User.get_property("link")
		VideoID = User.get_property("video_id")
		Quality = Query.split("+")[-2]
		FormatID = Query.split("+")[-1]
		Site = User.get_property("site")
		Compression = User.get_property("compression")
		if Quality == "null": Quality = None
		FileMessageID = StorageBox.get_file_message_id(Site, VideoID, Quality, Compression, watermarked = True)
		QualityImprovementGo = "" 
		QualityImprovementReady = ""

		if Settings["quality_improvement"]:
			QualityImprovementGo = "‚è≥ –£–ª—É—á—à–∞—é –∫–∞—á–µ—Å—Ç–≤–æ\\.\\.\\." 
			QualityImprovementReady = "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–æ\\.\n"

		if FileMessageID[0]:
			Bot.copy_message(Call.message.chat.id, FileMessageID[0], FileMessageID[1], caption = "@" + Settings["bot_name"])

		else:
			SendedMessage = Bot.send_message(
				chat_id = Call.message.chat.id,
				text = "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ\\.\\.\\.",
				parse_mode = "MarkdownV2"
			)
			Result = Downloader.download_video(Link, f"Temp/{User.id}/", f"{VideoID}.mp4", FormatID)

			if Result:

				if Settings["quality_improvement"]:
					Bot.edit_message_text(
						chat_id = Call.message.chat.id,
						message_id = SendedMessage.id,
						text = "‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n" + QualityImprovementGo,
						parse_mode = "MarkdownV2"
					)
					sleep(2)

				Bot.edit_message_text(
					chat_id = Call.message.chat.id,
					message_id = SendedMessage.id,
					text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚è≥ –í—ã–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –≤ Telegram\\.\\.\\.",
					parse_mode = "MarkdownV2"
				)
				Result = StorageBox.upload_file(User.id, Site, f"{VideoID}.mp4", Quality, Compression, watermarked = True)

				if Result:
					Bot.edit_message_text(
						chat_id = Call.message.chat.id,
						message_id = SendedMessage.id,
						text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é\\.\\.\\.",
						parse_mode = "MarkdownV2"
					)
					Result = StorageBox.wait_file_uploading(Site, VideoID, Quality, Compression, watermarked = True)

					if Result.code == 0:
						Bot.copy_message(Call.message.chat.id, Result["chat_id"], Result["message_id"], caption = "@" + Settings["bot_name"])
						Bot.edit_message_text(
							chat_id = Call.message.chat.id,
							message_id = SendedMessage.id,
							text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\\.",
							parse_mode = "MarkdownV2"
						)

					else:
						Bot.edit_message_text(
							chat_id = Call.message.chat.id,
							message_id = SendedMessage.id,
							text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram\\.\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ\\.",
							parse_mode = "MarkdownV2"
						)

				else:
					Bot.edit_message_text(
						chat_id = Call.message.chat.id,
						message_id = SendedMessage.id,
						text = f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ\\.\n{QualityImprovementReady}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –≤ Telegram\\.",
						parse_mode = "MarkdownV2"
					)

			else:
				Bot.edit_message_text(
					chat_id = Call.message.chat.id,
					message_id = SendedMessage.id,
					text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ\\.",
					parse_mode = "MarkdownV2"
				)

		User.set_property("is_downloading", False)
		User.clear_temp_properties()

	#==========================================================================================#
	# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í <<<<< #
	#==========================================================================================#

	AdminPanel.decorators.photo(Bot, Users)

	@Bot.message_handler(content_types = ["audio", "document", "video"])
	def File(Message: types.Message):
		User = Users.auth(Message.from_user)
		AdminPanel.procedures.files(Bot, User, Message)

		if Message.from_user.id in Settings["trusted_sources_id"]: 
			FileData = Message.caption.split("\n")
			Site = FileData[0]
			VideoID = FileData[1]
			Quality = FileData[2]
			Compression = True if FileData[3].endswith("on") else False
			Watermarked = True if FileData[4].endswith("on") else False
			if Quality == "None": Quality = None
			StorageBox.register_file(Site, VideoID, Quality, Compression, Watermarked, Message.id, User.id)

	Bot.infinity_polling()